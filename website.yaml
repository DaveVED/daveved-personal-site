AWSTemplateFormatVersion: "2010-09-09"
Description: AWS CloudFormation template to create two S3 buckets and configure them as static websites

Parameters:
  ReactAppBucketName:
    Description: Name of the S3 bucket for the React app
    Type: String
    MinLength: 3
    MaxLength: 63
  CertificateArn:
    Description: The Amazon Resource Name (ARN) of the SSL certificate
    Type: String
  HostedZoneId:
    Description: The hosted zone ID for the domain
    Type: String
Resources:
  ReactAppBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref ReactAppBucketName
      WebsiteConfiguration:
        IndexDocument: "index.html"
        ErrorDocument: "index.html"
  S3OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Access Identity for React App Bucket
  ReactAppBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ReactAppBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: GrantCloudFrontAccess
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt S3OriginAccessIdentity.S3CanonicalUserId
            Action:
              - s3:GetObject
            Resource: !Sub "arn:${AWS::Partition}:s3:::${ReactAppBucket}/*"
  ReactAppCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Aliases:
          - "daveved.com"
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          SslSupportMethod: sni-only
        Origins:
          - DomainName: !GetAtt ReactAppBucket.RegionalDomainName
            Id: ReactAppBucketOrigin
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${S3OriginAccessIdentity}"
        DefaultCacheBehavior:
          TargetOriginId: ReactAppBucketOrigin
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
  ReactAppRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: "daveved.com."
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !GetAtt ReactAppCloudFrontDistribution.DomainName

Outputs:
  s3ReactAppURL:
    Description: The URL of the React app
    Value: !Sub "http://${ReactAppBucket}.s3-website-${AWS::Region}.amazonaws.com"
  ReactAppURL:
    Description: The URL of the React app
    Value: !GetAtt ReactAppCloudFrontDistribution.DomainName
